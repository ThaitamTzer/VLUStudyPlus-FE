import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

import type { UserType } from './types/userType'
import permissions from '@/libs/permission.json'
import { aclConfig } from './configs/configACL'

// H√†m ki·ªÉm tra quy·ªÅn c·ªßa user
function checkPermission(userPermissionIDs: number[], requiredAction: string, requiredSubject: string) {
  return userPermissionIDs.some(id => {
    const permission = permissions.find(p => p.id === id)

    return (
      permission &&
      ((permission.action === requiredAction && permission.subject === requiredSubject) ||
        (permission.action === 'manage' && permission.subject === 'all'))
    )
  })
}

export function middleware(req: NextRequest) {
  const userDataCookie = req.cookies.get('userData')?.value
  const url = req.nextUrl.pathname
  const acl = aclConfig[url]

  // N·∫øu trang kh√¥ng c√≥ trong ACL, cho ph√©p truy c·∫≠p
  if (!acl) return NextResponse.next()

  if (!userDataCookie) {
    console.warn('‚ùå Kh√¥ng t√¨m th·∫•y userData trong cookie.')

    return NextResponse.redirect(new URL('/unauthorized', req.url))
  }

  let userData: UserType | null = null

  try {
    userData = JSON.parse(userDataCookie)
  } catch (error) {
    console.error('‚ùå L·ªói parse userData t·ª´ cookie:', error)

    return NextResponse.redirect(new URL('/404', req.url))
  }

  if (!userData || !userData.role || !userData.role.permissionID) {
    console.warn('‚ùå userData kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu permissionID.')

    return NextResponse.redirect(new URL('/404', req.url))
  }

  console.log('‚úÖ userData h·ª£p l·ªá:', userData)

  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
  const hasPermission = checkPermission(userData.role.permissionID, acl.action, acl.subject)

  if (!hasPermission) {
    console.warn('üö´ Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o:', url)

    return NextResponse.redirect(new URL('/404', req.url))
  }

  return NextResponse.next()
}

// Matcher t·ª± ƒë·ªông l·∫•y danh s√°ch route c·∫ßn ki·ªÉm tra
export const config = {
  matcher: Object.keys(aclConfig)
}
