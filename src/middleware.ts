import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

import type { UserType } from './types/userType'
import { defineAbilityFor } from './configs/acl'
import { aclConfig } from './configs/configACL'

export function middleware(req: NextRequest) {
  const userDataCookie = req.cookies.get('userData')?.value
  const url = req.nextUrl.pathname
  const acl = aclConfig[url]

  if (!acl) return NextResponse.next() // N·∫øu route kh√¥ng c√≥ trong ACL, cho ph√©p truy c·∫≠p

  if (!userDataCookie) {
    console.warn('‚ùå Kh√¥ng t√¨m th·∫•y userData trong cookie.')

    return NextResponse.redirect(new URL('/unauthorized', req.url))
  }

  let userData: UserType | null = null

  try {
    userData = JSON.parse(userDataCookie)
  } catch (error) {
    console.error('‚ùå L·ªói parse userData t·ª´ cookie:', error)

    return NextResponse.redirect(new URL('/not-found', req.url))
  }

  if (!userData) {
    return NextResponse.redirect(new URL('/not-found', req.url))
  }

  console.log('‚úÖ userData h·ª£p l·ªá:', userData)

  // T·∫°o ƒë·ªëi t∆∞·ª£ng Ability t·ª´ CASL
  const ability = defineAbilityFor(userData)

  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
  if (!ability.can(acl.action, acl.subject)) {
    console.warn('üö´ Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o:', url)

    return NextResponse.redirect(new URL('/unauthorized', req.url))
  }

  return NextResponse.next()
}

// Matcher t·ª± ƒë·ªông l·∫•y danh s√°ch route c·∫ßn ki·ªÉm tra
export const config = {
  matcher: Object.keys(aclConfig)
}
