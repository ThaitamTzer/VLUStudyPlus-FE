'use client'

import { Dialog, DialogContent, DialogTitle, IconButton, Typography, Grid, Paper } from '@mui/material'

import useSWR from 'swr'

import { useAcedemicProcessStore } from '@/stores/acedemicProcess.store'
import learnProcessService from '@/services/learnProcess.service'
import Iconify from '@/components/iconify'
import { fDate } from '@/utils/format-time'

type ViewDetailAcedecmicProcessProps = {
  id: string
}

export default function ViewDetailAcedecmicProcess(props: ViewDetailAcedecmicProcessProps) {
  const { id } = props

  const { data } = useSWR(
    id ? `/api/academic-processing/view-academicProcessing/${id}` : null,
    () => learnProcessService.viewDetailProcess(id),
    {
      revalidateOnFocus: false
    }
  )

  const { toogleViewDetailAcademicProcess, openViewDetailAcademicProcess } = useAcedemicProcessStore()

  const onClose = () => {
    toogleViewDetailAcademicProcess()
  }

  return (
    <Dialog open={openViewDetailAcademicProcess} onClose={onClose} maxWidth='md' fullWidth>
      <DialogTitle>
        <IconButton sx={{ position: 'absolute', right: 8, top: 8 }} onClick={onClose}>
          <Iconify icon='eva:close-outline' />
        </IconButton>
        <Typography variant='h4'>üìö Chi ti·∫øt x·ª≠ l√Ω h·ªçc v·ª•</Typography>
      </DialogTitle>
      <DialogContent>
        {data ? (
          <Grid container spacing={2}>
            {/* Th√¥ng tin sinh vi√™n */}
            <Section title='üë®‚Äçüéì Th√¥ng tin sinh vi√™n'>
              <Info label='M√£ sinh vi√™n' value={data.checkAcademicProcessing.studentId} />
              <Info
                label='H·ªç v√† t√™n'
                value={`${data.checkAcademicProcessing.lastName} ${data.checkAcademicProcessing.firstName}`}
              />
              <Info label='üìß Email' value={data?.student?.mail || 'Kh√¥ng t√¨m th·∫•y'} />
              <Info label='üéÇ Ng√†y sinh' value={fDate(data?.student?.dateOfBirth, 'dd/MM/yyyy') || 'Kh√¥ng t√¨m th·∫•y'} />
              <Info label='üìå L·ªõp' value={data.checkAcademicProcessing.classId} />
              <Info label='üìÖ Ni√™n kh√≥a' value={data.checkAcademicProcessing.cohortName} />
              <Info label='üè¢ Khoa' value={data.checkAcademicProcessing.faculty} />
              <Info label='üìñ NƒÉm h·ªçc' value={data.checkAcademicProcessing.year} />
              <Info label='üìÜ H·ªçc k·ª≥' value={data.checkAcademicProcessing.termName} />
            </Section>

            {/* Th√¥ng tin x·ª≠ l√Ω h·ªçc v·ª• */}
            <Section title='‚öñÔ∏è Th√¥ng tin x·ª≠ l√Ω h·ªçc v·ª•'>
              <Info label='üìå Tr·∫°ng th√°i' value={data.checkAcademicProcessing.handlingStatusByAAO} />
              <Info label='‚ùó L√Ω do' value={data.checkAcademicProcessing.reasonHandling} />
              <Info label='üìù Ghi ch√∫' value={data.checkAcademicProcessing.note || 'Kh√¥ng c√≥'} />
            </Section>

            {/* Qu√° tr√¨nh h·ªçc t·∫≠p */}
            <Section title='üìà Qu√° tr√¨nh h·ªçc t·∫≠p'>
              <Info label='üìä ƒêi·ªÉm trung b√¨nh chung' value={String(data.checkAcademicProcessing.DTBC)} />
              <Info label='üìö S·ªë t√≠n ch·ªâ' value={String(data.checkAcademicProcessing.STC)} />
              <Info label='üî¢ ƒêi·ªÉm trung b√¨nh t√≠ch l≈©y' value={String(data.checkAcademicProcessing.DTBCTL)} />
              <Info label='üéì S·ªë t√≠n ch·ªâ t√≠ch l≈©y' value={String(data.checkAcademicProcessing.STCTL)} />
            </Section>

            {/* ƒêƒÉng k√Ω h·ªçc ph·∫ßn */}
            <Section title='üìù ƒêƒÉng k√Ω h·ªçc ph·∫ßn'>
              {data.checkAcademicProcessing.courseRegistration.map((course, index) => (
                <Info
                  key={index}
                  label={`üìå H·ªçc k·ª≥ ${course.termName}`}
                  value={`ƒêƒÉng k√Ω: ${course.isRegister ? 'C√≥' : 'Kh√¥ng'}`}
                />
              ))}
            </Section>

            {/* Th√¥ng tin l·ªõp h·ªçc */}
            <Section title='üè´ Th√¥ng tin l·ªõp h·ªçc'>
              <Info label='üìé M√£ l·ªõp' value={data.checkAcademicProcessing.classId} />
              <Info label='üë®‚Äçüè´ Gi·∫£ng vi√™n' value={data.informationClass?.userName || 'Kh√¥ng c√≥'} />
              <Info label='üì© Email gi·∫£ng vi√™n' value={data.informationClass?.lectureId.mail || 'Kh√¥ng c√≥'} />
            </Section>

            {/* Th√¥ng tin thi·∫øu */}
            <Section title='‚ö†Ô∏è Th√¥ng tin thi·∫øu'>
              {data.missingInfoRows.map((info, index) => (
                <Typography key={index} variant='body2' fontWeight='bold'>
                  ‚ùó {info.message}
                </Typography>
              ))}
            </Section>
          </Grid>
        ) : (
          <Typography variant='h6'>üîÑ ƒêang t·∫£i d·ªØ li·ªáu...</Typography>
        )}
      </DialogContent>
    </Dialog>
  )
}

// Component ph·ª• cho m·ªói m·ª•c
function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <Grid item xs={12}>
      <Typography variant='h6' sx={{ mt: 2, mb: 1, fontWeight: 'bold', color: 'primary.main' }}>
        {title}
      </Typography>
      <Paper elevation={3} sx={{ padding: 2, borderRadius: 2, backgroundColor: '#f9f9f9' }}>
        {children}
      </Paper>
    </Grid>
  )
}

function Info({ label, value }: { label: string; value: string }) {
  return (
    <Typography variant='body1' sx={{ display: 'flex', gap: 1 }}>
      <span style={{ fontWeight: 'bold', color: '#555' }}>{label}:</span> {value}
    </Typography>
  )
}
